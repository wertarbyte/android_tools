#!/system/bin/sh
#
# Executes commands from a chroot environment

## default configuration values, changable via config file
# location of (debian) chroot (without trailing /)
ROOT=/sd-ext/debian
SWAP=/sd-ext/swapfile
# configuration file with directories to bind-mount into the chroot
BINDTAB=/sd-ext/bindtab

# put all chroot processes into a process group
CGROUP_NAME="debxec"
# mounpoint of cgroup fs
CGROUP_BASE="/dev/cpuctl"

# determine the full path to this script
MYSELF="$(realpath $0)"

PATH="/usr/bin:/usr/sbin:/bin:/sbin:/system/sbin:/system/bin:/system/xbin:/system/xbin/bb:/data/local/bin"

CHROOT_CMD="chroot"

# source config files
CONF_FILES="/data/local/etc/debxec.defaults /sd-ext/debxec.defaults $HOME/.debxec.defaults"
for F in $CONF_FILES; do
    [ -e "$F" ] && . "$F"
done

mounted() {
  awk -vDIR=$1 '$2 == DIR { MOUNTED=1;} END {exit ! MOUNTED;}' /proc/mounts
}

swap_active() {
  awk -vSWAP=$1 'NR>1 && $1 == SWAP { ACTIVE=1;} END {exit ! ACTIVE;}' /proc/swaps
}

gen_pattern() {
  local i=$1
  while [ $i -gt 0 ]; do
    echo -n '?'
    i=$(($i-1))
  done
}

is_subdir() {
  local DIR="$1"
  local BASE="$2"
  [ "$DIR" = "$BASE" ] && return 0
  
  local OFFSET=$(( ${#DIR} - ${#BASE} - 1 ))
  local PARTDIR=${DIR%$(gen_pattern $OFFSET)}
  [ "$PARTDIR" = "${BASE}/" ] && return 0
  
  return 1;
}

no_apps_running() {
  for l in /proc/*/root; do
    # root directory of the inspected process
    local PROOT=$(readlink "$l")
    # is the program / part of the chroot?
    is_subdir "$PROOT" "$ROOT" && return 1
  done
  return 0
}

build_chroot() {
    # mount essential file systems into the chroot
    mounted $ROOT/proc    || mount proc -t proc $ROOT/proc
    mounted $ROOT/sys     || mount sysfs -t sysfs $ROOT/sys
    mounted $ROOT/dev     || mount --rbind /dev $ROOT/dev
    mounted $ROOT/dev/pts || mount devpts -t devpts $ROOT/dev/pts
    # bind mount custom directories
    if [ -e "$BINDTAB" ]; then
      # remove comments
      sed 's!#.*$!!;/^[[:space:]]*$/d;' "$BINDTAB" | \
      while read SRC DST; do
        mounted ${ROOT}${DST} || mount --rbind "$SRC" "${ROOT}${DST}"
      done
    fi
}

teardown_chroot() {
    # unmount all file systems beneath the chroot
    tac /proc/mounts | while read DEV DIR FS OPTS X Y; do
        if is_subdir "$DIR" "$ROOT"; then
            umount "$DIR"
        fi
    done
}

enter_cgroup() {
    # enter process group
    if mounted "${CGROUP_BASE}"; then
        local MYGROUP="${CGROUP_BASE}/$CGROUP_NAME"
        # create group if it does not exist
        [ -d "$MYGROUP" ] || mkdir "$MYGROUP"
        echo $$ > "$MYGROUP/tasks"
        echo 1 > "$MYGROUP/notify_on_release"
        # install cleanup handler
        if [ -x "$MYSELF" ]; then
            echo $MYSELF > "${CGROUP_BASE}/release_agent"
        fi
    else
        echo "Unable to enter process group, ${CGROUP_BASE} not mounted" >&2
    fi
}

cleanup() {
    # deactivate swap and unmount if no apps left
    if no_apps_running; then
        swap_active "$SWAP" && \
            swapoff "$SWAP"
        teardown_chroot
    fi
}

if [ "$1" = "--cleanup" ]; then
    cleanup
    exit $?
fi

# if we are called with our process group name
# as the only argument, we should start cleaning up
if [ "$1" = "/${CGROUP_NAME}" ] && [ ! -e "$ROOT/$1" ]; then
    log "Cleaning up chroot"
    cleanup
    exit $?
fi

build_chroot

# activate swap if specified
[ -e "$SWAP" ] && \
  ! swap_active "$SWAP" && \
  swapon "$SWAP"

# enter process group
enter_cgroup

SHELL=/bin/bash
HOME=/root
export SHELL
export HOME

$CHROOT_CMD $ROOT ${*:-$SHELL -l}

cleanup
